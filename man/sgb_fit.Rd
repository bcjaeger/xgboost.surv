% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgboost.R
\name{sgb_fit}
\alias{sgb_fit}
\title{Survival Gradient Booster}
\usage{
sgb_fit(sgb_df, nrounds = NULL, eval_time_quants = c(0.1, 0.9),
  missing = NA, weight = NULL, params = sgb_params(), verbose = 1,
  print_every_n = max(c(1, round(nrounds/5))),
  early_stopping_rounds = NULL, maximize = NULL, save_period = NULL,
  save_name = "sgboost.model", xgb_model = NULL, callbacks = list())
}
\arguments{
\item{sgb_df}{An object of class 'sgb_data' (see \link{sgb_data}).}

\item{nrounds}{max number of boosting iterations.}

\item{eval_time_quants}{To evaluate risk prediction models, a set of
evaluation times are created using the observed event times in \code{sgb_df}.
These unique event times are truncated by including the times that are
above and below and lower and upper quantiles of time specified in
\code{eval_time_quants}, respectively. For example, To include all times,
use \code{eval_time_quants = c(0,100)}. To include the times between the
first and second quartiles, use \code{eval_time_quants = c(25, 50)}}

\item{missing}{by default is set to NA, which means that NA values should be considered as 'missing'
by the algorithm. Sometimes, 0 or other extreme value might be used to represent missing values.
This parameter is only used when input is a dense matrix.}

\item{weight}{a vector indicating the weight for each row of the input.}

\item{params}{the list of parameters.
       The complete list of parameters is available at \url{http://xgboost.readthedocs.io/en/latest/parameter.html}.
       Below is a shorter summary:

1. General Parameters

\itemize{
  \item \code{booster} which booster to use, can be \code{gbtree} or \code{gblinear}. Default: \code{gbtree}.
}

2. Booster Parameters

2.1. Parameter for Tree Booster

\itemize{
  \item \code{eta} control the learning rate: scale the contribution of each tree by a factor of \code{0 < eta < 1} when it is added to the current approximation. Used to prevent overfitting by making the boosting process more conservative. Lower value for \code{eta} implies larger value for \code{nrounds}: low \code{eta} value means model more robust to overfitting but slower to compute. Default: 0.3
  \item \code{gamma} minimum loss reduction required to make a further partition on a leaf node of the tree. the larger, the more conservative the algorithm will be.
  \item \code{max_depth} maximum depth of a tree. Default: 6
  \item \code{min_child_weight} minimum sum of instance weight (hessian) needed in a child. If the tree partition step results in a leaf node with the sum of instance weight less than min_child_weight, then the building process will give up further partitioning. In linear regression mode, this simply corresponds to minimum number of instances needed to be in each node. The larger, the more conservative the algorithm will be. Default: 1
  \item \code{subsample} subsample ratio of the training instance. Setting it to 0.5 means that xgboost randomly collected half of the data instances to grow trees and this will prevent overfitting. It makes computation shorter (because less data to analyse). It is advised to use this parameter with \code{eta} and increase \code{nrounds}. Default: 1
  \item \code{colsample_bytree} subsample ratio of columns when constructing each tree. Default: 1
  \item \code{num_parallel_tree} Experimental parameter. number of trees to grow per round. Useful to test Random Forest through Xgboost (set \code{colsample_bytree < 1}, \code{subsample  < 1}  and \code{round = 1}) accordingly. Default: 1
  \item \code{monotone_constraints} A numerical vector consists of \code{1}, \code{0} and \code{-1} with its length equals to the number of features in the training data. \code{1} is increasing, \code{-1} is decreasing and \code{0} is no constraint.
  \item \code{interaction_constraints} A list of vectors specifying feature indices of permitted interactions. Each item of the list represents one permitted interaction where specified features are allowed to interact with each other. Feature index values should start from \code{0} (\code{0} references the first column).  Leave argument unspecified for no interaction constraints.
}

2.2. Parameter for Linear Booster

\itemize{
  \item \code{lambda} L2 regularization term on weights. Default: 0
  \item \code{lambda_bias} L2 regularization term on bias. Default: 0
  \item \code{alpha} L1 regularization term on weights. (there is no L1 reg on bias because it is not important). Default: 0
}

3. Task Parameters

\itemize{
\item \code{objective} specify the learning task and the corresponding learning objective, users can pass a self-defined function to it. The default objective options are below:
  \itemize{
    \item \code{reg:squarederror} Regression with squared loss (Default).
    \item \code{reg:logistic} logistic regression.
    \item \code{binary:logistic} logistic regression for binary classification. Output probability.
    \item \code{binary:logitraw} logistic regression for binary classification, output score before logistic transformation.
    \item \code{num_class} set the number of classes. To use only with multiclass objectives.
    \item \code{multi:softmax} set xgboost to do multiclass classification using the softmax objective. Class is represented by a number and should be from 0 to \code{num_class - 1}.
    \item \code{multi:softprob} same as softmax, but prediction outputs a vector of ndata * nclass elements, which can be further reshaped to ndata, nclass matrix. The result contains predicted probabilities of each data point belonging to each class.
    \item \code{rank:pairwise} set xgboost to do ranking task by minimizing the pairwise loss.
  }
  \item \code{base_score} the initial prediction score of all instances, global bias. Default: 0.5
  \item \code{eval_metric} evaluation metrics for validation data. Users can pass a self-defined function to it. Default: metric will be assigned according to objective(rmse for regression, and error for classification, mean average precision for ranking). List is provided in detail section.
}}

\item{verbose}{If 0, xgboost will stay silent. If 1, it will print information about performance.
If 2, some additional information will be printed out.
Note that setting \code{verbose > 0} automatically engages the
\code{cb.print.evaluation(period=1)} callback function.}

\item{print_every_n}{Print each n-th iteration evaluation messages when \code{verbose>0}.
Default is 1 which means all messages are printed. This parameter is passed to the
\code{\link{cb.print.evaluation}} callback.}

\item{early_stopping_rounds}{If \code{NULL}, the early stopping function is not triggered.
If set to an integer \code{k}, training with a validation set will stop if the performance
doesn't improve for \code{k} rounds.
Setting this parameter engages the \code{\link{cb.early.stop}} callback.}

\item{maximize}{If \code{feval} and \code{early_stopping_rounds} are set,
then this parameter must be set as well.
When it is \code{TRUE}, it means the larger the evaluation score the better.
This parameter is passed to the \code{\link{cb.early.stop}} callback.}

\item{save_period}{when it is non-NULL, model is saved to disk after every \code{save_period} rounds,
0 means save at the end. The saving is handled by the \code{\link{cb.save.model}} callback.}

\item{save_name}{the name or path for periodically saved model file.}

\item{xgb_model}{a previously built model to continue the training from.
Could be either an object of class \code{xgb.Booster}, or its raw data, or the name of a
file with a previously saved model.}

\item{callbacks}{a list of callback functions to perform various task during boosting.
See \code{\link{callbacks}}. Some of the callbacks are automatically created depending on the
parameters' values. User can provide either existing or their own callback methods in order
to customize the training process.}
}
\value{
An \code{sgb_booster} object containing:
\itemize{
\item \code{fit}: An \code{xgb.booster} object (see \link[xgboost:xgb.train]{xgboost}).
\item \code{label}: A numeric vector with time-to-event values, where
censored observations have negative times and uncensored
observations have positive times (see \link{sgb_label}).
\item \code{predictions} Predicted values from \code{fit} for the training
data. These predictions are saved as they are required to
estimate the baseline hazard function of \code{fit}.
}
}
\description{
The \code{sgb_fit} function is a wrapper for
\link[xgboost:xgb.train]{xgboost} designed to implement survival
analyses.
}
\examples{

x1 <- rnorm(100)
x2 <- rnorm(100)
s  <- as.numeric(x1 + x2 + rnorm(100) > 0)
t  <- runif(100, min=1, max=10)

df = data.frame(time=t, status=s, x1=x1, x2=x2)

df = as_sgb_data(df, time=time, status=status)

sgb_booster <- sgb_fit(
  sgb_df = df,
  params = sgb_params(max_depth=1),
  nrounds = NULL,
  verbose = TRUE,
  print_every_n = 10
)


}
